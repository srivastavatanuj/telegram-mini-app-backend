name: Deploy Backend

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        ECR_REPOSITORY: xrr-mini-app-backend
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Install Elastic Beanstalk CLI
      run: |
        pip install awsebcli

    - name: Initialize Elastic Beanstalk Application
      run: |
        eb init -p docker xrr-mini-app-backend --region ${{ secrets.AWS_REGION }}

    - name: Check if Elastic Beanstalk environment exists
      id: check_env
      run: |
        if eb status xrr-mini-app-backend-env; then
          echo "exists=true" >> $GITHUB_ENV
        else
          echo "exists=false" >> $GITHUB_ENV
        fi

    - name: Create Elastic Beanstalk Environment
      if: env.exists == 'false'
      run: |
        eb create xrr-mini-app-backend-env --instance_type t2.medium

    - name: Deploy to Elastic Beanstalk
      if: env.exists == 'true'
      run: |
        eb deploy xrr-mini-app-backend-env

    - name: Run Django Migrations
      run: |
        eb ssh xrr-mini-app-backend-env --command "docker exec -it \$(docker ps -q) python manage.py migrate"
